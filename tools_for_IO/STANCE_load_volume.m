function [V,Y] = STANCE_load_volume(fileName,dataDir,gzipFlag,mask)
%%% Spontaneous and Task-related Activation of Neuronally Correlated Events (STANCE) %%%
%STANCE_load_volume loads 3D/4D MRI header and volume data and header info from fileName in dataDir (optional) 
%   into a data structure Volume:
%        Volume.header = same format as SPM12 header
%        Volume.data = MRI data array
%        Volume.XYZ = real space coordinates of 3D array in [mm]
%
%   NOTE: - if ANALYZE format, fileName should be *.hdr and *.img will be assumed to exist 
%         - can accomodate gziped file formats as well.
%         - optional mask for loading images can be provided.
%
%   Supported filetypes: NIFTI, ANALYZE and gzipped files
%
%   gzipFlag indicated whether to keep only archived gzipped files (lower 
%   storage cost) or allowing for ungzipped files to remain (faster run times).
%
% Jason E. Hill
% STANCE_load_volume.m      updated     10 DEC 2015


%% Turn off finite warning
warning('off', 'MATLAB:FINITE:obsoleteFunction');
%% Turn off nifti class warning when loading SPM mat files
warning('off', 'MATLAB:unknownElementsNowStruc');
warning('off', 'MATLAB:dispatcher:ShadowedMEXExtension');
warning('off', 'MATLAB:pfileOlderThanMfile');

%% Input argument handling and initialization

if nargin < 4 
    mask  = [];
end
if nargin < 3 
    gzipFlag  = false;
end

if ~nargin
    V = struct('fname',   {},...
               'dim',     {},...
               'dt',      {},...
               'pinfo',   {},...
               'mat',     {},...
               'n',       {},...
               'descrip', {},...
               'private', {});
    Y = [];
           
elseif isempty(fileName)
    [V,Y] = STANCE_load_volume;
    if iscell(fileName)
        Volume = {Volume}; %#ok<NODEF>
    end %#ok<NASGU>
           
elseif isstruct(fileName)
    V = fileName;
    Y = spm_read_vols(V);
    
elseif iscell(fileName)
    if nargin < 2 || isempty(dataDir)
       [V,Y] = cellfun(@STANCE_load_volume,fileName,'UniformOutput',false);
    else
       [V,Y] = cellfun(@STANCE_load_volume,fileName,dataDir,'UniformOutput',false); 
    end
else
    [V,Y] = STANCE_load_volume;
    for i=1:size(fileName,1)
        n  = 0;
        if nargin < 2 || isempty(dataDir)
            v = STANCE_load_header(deblank(fileName(i,:)),[],false);            
        else
            v = STANCE_load_header(deblank(fileName(i,:)),dataDir,false);
        end
        f = fieldnames(v);
        for j=1:numel(f)
            % save header info
            [V(1:size(v,1),n+1:n+size(v,2)).(f{j})] = deal(v.(f{j}));
        end
        % extract the volume data and real space locations [mm]
        if isempty(mask)
            [Yn,~] = spm_read_vols(v);
        else
            [Yn,~] = spm_read_vols(v,mask); 
        end
        if size(v,2)>1 || iscell(Y)
            Y{n+1:n+size(v,2)} = Yn;          
        else
            Y = Yn;          
        end
        n = n + size(v,2); %#ok<NASGU>

        %  Remove any files generated by gunzip
        
        fileExtension = fileName(i,end-2:end);
        if strcmpi(fileExtension,'.gz') && gzipFlag
            gunzipFileName = fileName(i,1:end-3);
            delete(gunzipFileName);
        end 
    end
end

end

